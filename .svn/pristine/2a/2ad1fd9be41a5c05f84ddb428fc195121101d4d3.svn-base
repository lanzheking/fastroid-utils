package com.honestwalker.androidutils.ImageSelector;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.MediaStore;
import android.util.Log;

import com.honestwalker.androidutils.IO.LogCat;
import com.honestwalker.androidutils.ImageSelector.utils.BroadcaseManager;
import com.honestwalker.androidutils.ImageSelector.utils.PictureUtil;
import com.honestwalker.androidutils.ImageUtil;
import com.honestwalker.androidutils.exception.ExceptionUtil;
import com.honestwalker.androidutils.system.ProcessUtil;

import java.io.File;
import java.util.ArrayList;

public class ImageSelector {
	
	private Activity mContext;
	
	private final String TAG = "ImageSelector";
	
	public final static int REQUEST_CAMERA = 71;
	public final static int REQUEST_IMAGE_SELECT = 72;
	public final static int REQUEST_IMAGE_CUT = 73;
	public final static int REQUEST_SINGLE_IMAGE_SELECT = 74;
	public final static int REQUEST_MULTI_IMAGE_SELECT = 75;
	
	private ImageSelectListener imageSelectListener;
	
	public static final String ACTION = "com.honestwalker.models.ImageSelector";
	
	/** 是否需要切割图片 */
	private boolean needCut = false;
	private String  outputPath = "";

	// 裁剪比例
	private int aspectX = 1;
	private int aspectY = 1;

	private int maxWidth = 1024;

	private MediaOprator mediaOprator;

	private ImageSelectType type;

	public ImageSelector(Activity context) {
		this.mContext = context;
		mediaOprator = new MediaOprator(context);
	}
	
	public void openCamera(boolean needCut , String outputPath , int maxWidth , int aspectX , int aspectY) {
		this.needCut = needCut;
		this.outputPath = outputPath;
		this.aspectX = aspectX;
		this.aspectY = aspectY;
		this.maxWidth = maxWidth;

//		BroadcaseManager.registerReceiver(mContext, ACTION, imageSelectorReceiver);
//
//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_CAMERA);
//		intent.putExtra("outputPath", outputPath);
//		intent.putExtra("aspectX", aspectX);
//		intent.putExtra("aspectY" , aspectY);
//		intent.putExtra("maxWidth" , maxWidth);
//		mContext.startActivity(intent);

		BroadcaseManager.registerReceiver(mContext, ACTION, imageSelectorReceiver);
		type = ImageSelectType.TYPE_CAMERA;
		mediaOprator.openCamera(outputPath, maxWidth, aspectX, aspectY);

	}
	
	public void openCamera(String outputPath) {

		this.outputPath = outputPath;
		BroadcaseManager.registerReceiver(mContext, ACTION, imageSelectorReceiver);
		
//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_CAMERA);
//		intent.putExtra("outputPath", outputPath);
//		mContext.startActivity(intent);

		type = ImageSelectType.TYPE_CAMERA;
		mediaOprator.openCamera(outputPath, maxWidth, aspectX, aspectY);
		
	}
	
	private void toImageCut(Uri imgCutUri ,String outputPath, int maxWidth, int aspectX, int aspectY) {
		this.type = ImageSelectType.TYPE_IMAGE_CUT;
		this.outputPath = outputPath;
		this.maxWidth = maxWidth;
		this.aspectX = aspectX;
		this.aspectY = aspectY;
//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_IMAGE_CUT);
//		intent.putExtra("outputPath", outputPath);
//		intent.putExtra("imgCutUri", imgCutUri);
//		intent.putExtra("aspectX" , aspectX);
//		intent.putExtra("aspectY" , aspectY);
//		intent.putExtra("maxWidth" , maxWidth);
//		mContext.startActivity(intent);
		mediaOprator.toImageCut(imgCutUri, outputPath, maxWidth , aspectX , aspectY);
	}
	
	public void selectImage(boolean needCut , String outputPath , int aspectX , int aspectY) {
		this.needCut = needCut;
		this.outputPath = outputPath;
		this.aspectX = aspectX;
		this.aspectY = aspectY;
		BroadcaseManager.registerReceiver(mContext, ACTION, imageSelectorReceiver);
//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_IMAGE_SELECTOR);
//		intent.putExtra("needCut", needCut);
//		intent.putExtra("outputPath" , outputPath);
//		intent.putExtra("aspectX" , aspectX);
//		intent.putExtra("aspectY", aspectY);
//		intent.putExtra("maxWidth" , maxWidth);
//		mContext.startActivity(intent);
		mediaOprator.sysImageSelect();
	}
	
	public void selectImage() {
		BroadcaseManager.registerReceiver(mContext, ACTION , imageSelectorReceiver);
		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_IMAGE_SELECTOR);
		mContext.startActivity(intent);
	}
	
	/**
	 * 
	 * @param needCut
	 * @param outputPath  输出文件路径，包括文件名和后缀
	 */
	public void singleSelectImage(boolean needCut , String outputPath , int aspectX , int aspectY) {
		this.needCut = needCut;
		this.outputPath = outputPath;
		this.aspectX = aspectX;
		this.aspectY = aspectY;
		singleSelectImage();
	}
	
	private void singleSelectImage() {

		this.type = ImageSelectType.TYPE_SINGLE_IMAGE_SELECTOR;

		BroadcaseManager.registerReceiver(mContext, ACTION, imageSelectorReceiver);

//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra("signleSelect", true);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_SINGLE_IMAGE_SELECTOR);
//		intent.putExtra("aspectX" , aspectX);
//		intent.putExtra("aspectY" , aspectY);
//		mContext.startActivity(intent);

		mediaOprator.singleImageSelect();

	}
	
	public void multiSelectImage(int maxSelect) {

		this.type = ImageSelectType.TYPE_MULTI_IMAGE_SELECTOR;

		BroadcaseManager.registerReceiver(mContext, ACTION , imageSelectorReceiver);

//		Intent intent = new Intent(mContext , ImageSelectorAgentActivity.class);
//		intent.putExtra(ImageSelectType.class.getSimpleName(), ImageSelectType.TYPE_MULTI_IMAGE_SELECTOR);
//		intent.putExtra("maxSelect", maxSelect);
//		mContext.startActivity(intent);

		mediaOprator.multiImageSelect(maxSelect);

	}
	
	public void setImageSelectListener(ImageSelectListener imageSelectListener) {
		this.imageSelectListener = imageSelectListener;
	}

	/** 图片选择广播接收者 */
	private BroadcastReceiver imageSelectorReceiver = new BroadcastReceiver(){ 
		
        @Override
        public void onReceive(Context context, Intent intent) {
			LogCat.d(TAG, "接收到广播 intent=" + intent);
        	if(intent != null) {
        		int resultCode  = intent.getIntExtra("resultCode" , mContext.RESULT_CANCELED);
        		int requestCode = intent.getIntExtra("requestCode", -1);
        		
        		ArrayList<String> selectedImages = new ArrayList<String>();

				if(resultCode == Activity.RESULT_CANCELED) {
					unregisterReceiver();
					if(imageSelectListener != null) {
						imageSelectListener.onCancel();
						imageSelectListener.onComplete();
					}
				} else if((requestCode == REQUEST_IMAGE_SELECT || requestCode == REQUEST_CAMERA || requestCode == REQUEST_SINGLE_IMAGE_SELECT)) {
					String selectedImagePath = intent.getStringExtra("imgPath");
					if(selectedImagePath == null) {
						return;
					}
					selectedImages.add(selectedImagePath);

					Log.d(TAG, "需要图片剪切 " + ImageSelector.this.needCut);
					if(ImageSelector.this.needCut) {  // 如果需要剪切

						Bitmap bitmap = BitmapFactory.decodeFile(selectedImagePath);

						// 去图片剪切
						Uri resultUri = Uri.fromFile(new File(selectedImagePath));

						Uri mUri = Uri.parse("content://media/external/images/media");

						Cursor cursor = mContext.managedQuery(
								MediaStore.Images.Media.EXTERNAL_CONTENT_URI, null, null,
								null, MediaStore.Images.Media.DEFAULT_SORT_ORDER);
						cursor.moveToFirst();

						while (!cursor.isAfterLast()) {
							String data = cursor.getString(cursor
									.getColumnIndex(MediaStore.MediaColumns.DATA));
							if (selectedImagePath.equals(data)) {
								int ringtoneID = cursor.getInt(cursor
										.getColumnIndex(MediaStore.MediaColumns._ID));
								resultUri = Uri.withAppendedPath(mUri, ""
										+ ringtoneID);
								break;
							}
							cursor.moveToNext();
						}

//        				Uri resultUri = ( (intent == null) || resultCode != ((Activity)context).RESULT_OK ) ? null : intent.getData();

						Log.d(TAG, "将要剪切的图片:" + resultUri);

						if(resultUri != null) {
							toImageCut(resultUri, outputPath, maxWidth, aspectX, aspectY);
							return;
						}
					}

					if(!needCut) {
						LogCat.d("Main", "imageSelectListener=" + imageSelectListener);
						if(imageSelectListener != null) {
							ImageSelectType type = (ImageSelectType) intent.getSerializableExtra(ImageSelectType.class.getSimpleName());
							LogCat.d("Main", "发送回调");
							imageSelectListener.onSelected(type, selectedImages);
							unregisterReceiver();
							imageSelectListener.onComplete();
						}
					}

				} else if(requestCode == REQUEST_MULTI_IMAGE_SELECT) {
					ArrayList<String> imgPaths = intent.getStringArrayListExtra("imgPaths");
					selectedImages.addAll(imgPaths);

					if(imageSelectListener != null) {
						imageSelectListener.onSelected(type, selectedImages);
					}

					unregisterReceiver();

					imageSelectListener.onComplete();

				} else if(requestCode == REQUEST_IMAGE_CUT) {
					String selectedImagePath = intent.getStringExtra("imgPath");
					selectedImages.add(selectedImagePath);

					if(imageSelectListener != null) {
						ImageSelectType type = (ImageSelectType) intent.getSerializableExtra(ImageSelectType.class.getSimpleName());
						imageSelectListener.onSelected(type, selectedImages);
						unregisterReceiver();
						imageSelectListener.onComplete();
					}

				}

        	}
        }
    };

	private void sendCallbackBroadcast(Intent intent) {
		LogCat.d(TAG , "发送广播 ");
		BroadcaseManager.sendBroadcast(mContext, ImageSelector.ACTION, intent);
	}

	private void ifNeedCut(Intent intent) {
		if(needCut) {
			Uri uri = Uri.fromFile(new File(intent.getStringExtra("imgPath")));
			toImageCut(uri, outputPath, maxWidth, aspectX, aspectY);
		} else {
			sendCallbackBroadcast(intent);
		}
	}

	public void onResult(int requestCode, int resultCode, Intent data) {

		Log.d(TAG, "ImageSelectorAgentActivity OnActivityResult requestCode=" + requestCode + " resultCode=" + resultCode);

		if(resultCode == Activity.RESULT_CANCELED) {
			LogCat.d(TAG, "取消操作");
			Intent intent = new Intent();
			intent.putExtra("requestCode", requestCode);
			intent.putExtra("resultCode", resultCode);
			sendCallbackBroadcast(intent);
			return;
		}

		Intent intent = new Intent();

		if(data == null) data = new Intent();

		intent.putExtra("requestCode", requestCode);
		intent.putExtra("resultCode", resultCode);
		intent.putExtra(ImageSelectType.class.getSimpleName(), type);

		if(intent.hasExtra("aspectX")) {
			aspectX = intent.getIntExtra("aspectX" , 1);
		}
		if(intent.hasExtra("aspectY")) {
			aspectY = intent.getIntExtra("aspectY" , 1);
		}

		LogCat.d(TAG , "本地 比例 " + aspectX + " : " + aspectY);

		if(ImageSelector.REQUEST_CAMERA == requestCode) {

			Uri cameraOutputPath = Uri.fromFile(new File(outputPath));
			intent.putExtra("imgPath", cameraOutputPath.getPath());

			if(maxWidth != 0) {
				ImageUtil imageUtl = new ImageUtil();

				imageUtl.imageZip(cameraOutputPath.getPath(), maxWidth);
				LogCat.d(TAG, "拍照完毕 图片压缩到 " + maxWidth);
			}

			int degree = PictureUtil.readPictureDegree(cameraOutputPath.getPath());
			LogCat.d(TAG , "拍照后图片方向: " + degree);

			if(degree != 90) {
				boolean rotateResult = PictureUtil.rotate(cameraOutputPath.getPath() , 90);
				if(rotateResult) {
					LogCat.d(TAG , "照片转正成功");
				} else {
					LogCat.d(TAG , "照片转正失败");
				}
			}

//			showPreview(cameraOutputPath.getPath());
			ifNeedCut(intent);

		} else if (ImageSelector.REQUEST_IMAGE_SELECT == requestCode){

			Uri selectedImageUri = data.getData();

			String picturePath = "";
			if(selectedImageUri.toString().startsWith("content://")) {
				String[] filePathColumn = { MediaStore.Images.Media.DATA };
				Cursor cursor = mContext.getContentResolver().query(selectedImageUri, filePathColumn, null, null, null);
				cursor.moveToFirst();

				int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
				picturePath = cursor.getString(columnIndex);
				cursor.close();
			} else {
				picturePath = selectedImageUri.toString().replace("file://" , "");
			}

			Log.d(TAG, "图片选择完成 picturePath=" + picturePath);

			intent.putExtra("imgPath", picturePath);

//			showPreview(picturePath);
//
			ifNeedCut(intent);

		} else if(ImageSelector.REQUEST_SINGLE_IMAGE_SELECT == requestCode) {
			ArrayList<String> imgPaths = data.getStringArrayListExtra("imgPaths");
			Log.d(TAG, "单图选择 " + imgPaths);
			if(imgPaths != null && imgPaths.size() >= 1) {
				intent.putExtra("imgPath", imgPaths.get(0));
			}
			if(data != null) {
				intent.setData(data.getData());
			}
			ifNeedCut(intent);
		} else if(ImageSelector.REQUEST_MULTI_IMAGE_SELECT == requestCode) {

			ArrayList<String> imgPaths = data.getStringArrayListExtra("imgPaths");
			Log.d(TAG, "多图选择 " + imgPaths);
			intent.putExtra("imgPaths", imgPaths);

		} else if(ImageSelector.REQUEST_IMAGE_CUT == requestCode) {

			try {
				if(data != null && data.getExtras() != null) {
					Bitmap cropedBitmap = data.getExtras().getParcelable("data");
					if(cropedBitmap == null) {
						Log.d(TAG, "返回数据没有图片，从" + outputPath + "中取。");
						cropedBitmap = BitmapFactory.decodeFile(outputPath);
						Log.d(TAG, "取得到的图片:" + cropedBitmap);
					} else {
						Log.d(TAG, "返回数据有图片");
					}
					if(cropedBitmap != null) {
						Log.d(TAG, "cropedBitmap = " + cropedBitmap.getWidth() + "   " + cropedBitmap.getHeight());
						// 清晰度设置
						File saveFile = new ImageUtil().bitmapToFile(outputPath, cropedBitmap, 100, cropedBitmap.getWidth());
						if(saveFile != null) {
							Log.d(TAG, "保存图片到:" + saveFile.getPath() + "  " + saveFile.exists());
						} else {
							Log.d(TAG, "cropedBitmap 转图片失败 ；");
							saveFile = new File(outputPath);
						}
						intent.putExtra("imgPath", saveFile.getPath());
					} else {
						Log.d(TAG, outputPath + " bitmap 转图片失败 ");
					}

					try {
						if(!cropedBitmap.isRecycled()) {
							cropedBitmap.recycle();
						}
					} catch (Exception e) {}

				} else {
					Log.d(TAG, "data = null || data.getExtras() = null");
				}

			} catch (Exception e) {
				ExceptionUtil.showException(TAG , e);
			}

			sendCallbackBroadcast(intent);

		}

		if(needCut) {			// 需要图片剪切时，只有剪切完毕才finish
//			sendCallbackBroadcast(intent);
			if(ImageSelector.REQUEST_IMAGE_CUT == requestCode) {
			}
		} else {
			sendCallbackBroadcast(intent);
		}

	}

	/**
	 * 反注册广播
	 */
	private void unregisterReceiver() {
		try {
			BroadcaseManager.unregisterReceiver(mContext, imageSelectorReceiver);
		} catch (Exception e) {
			LogCat.d(TAG , "广播已经回收");
		}
	}

	/**
	 * 回收资源
	 * @param context
	 */
	public void destroy(Context context) {
		LogCat.d(TAG , "图片选择流程完毕 ， getProcessName=" + ImageSelectorAgentActivity.getProcessName());
		if(ImageSelectorAgentActivity.getProcessName() != null) {
			ProcessUtil.killProcessByName(ImageSelectorAgentActivity.getProcessName());
		}
		unregisterReceiver();
	}

}
